

- OOP와 class
	~ 객체 지향 프로그래밍 Object Oriented Programming
		- 이전(oop.cpp)의 마이펫 프로그램의 문제점
			- play(*list[play_with])등의 형태로 함수에 인자를 매번 전달?
				-> play가 animal 한다?
				-> animal이 play하는것이 일반적으로 더 맞지 않나?
				-> 그러면 animal.play()등의 방식으로 프로그래밍 할 수 있지 않을까?
		- 추상화
			- 현실 세계의 무언가를 컴퓨터로 100% 옮겨올수가 없다
			- 그래서 현실 세계의 무언가를 컴퓨터로 적절하게 처리할 수 있도록 하는것
			-> 추상화 : 핵심적이거나 공통돠는 속성 및 기능을 간추리고 이름을 붙이는 것
		- 객체(Object)
			- 사전적 의미 : 실제 존재하는 것
			- 프로그래밍에서는 사물과 같은 유형적인 것 뿐만이 아니라, 개념이나 논리와 같은 무형적인것도 포함됨
			- 객체 : 변수들과 참고 자료들로 이루어진 소프트웨어(메모리) 덩어리
		- 객체, 변수, 메서드
			- 객체 = 사물
			- 변수 = 사물의 속성
			- 메서드 = 사물의 행위
		- 객체 지향 3요소 5원칙(모드의코드에서 자세한 설명이 없어서 이곳을 참고 https://gusrb3164.github.io/computer-science/2021/06/22/oop/)
			- 3요소
				1. 캡슐화(Encapsulation) == 정보 은닉
					- 프로그램 내에서 같은 기능을 목적으로 작성된 코드를 모아서 다른 곳(클래스)에서 안보이게 숨기는 것
					- 클래스 내에서 사용할 속성은 숨기고(private), 객체가 수행할 기능은 공개(public)하는 것을 의미
				2. 상속(Inheritance) == 재사용 + 확장
					- 클래스 사이에 부모와 자식 클래스가 존재할 수 있다는 뜻
					- 자식 클래스는 상속받은 부모 클래스의 속성 및 기능을 사용할 수 있다
				3. 다형성(Polymorphism) == 사용편의
					- 하나의 객체가 여러 가지 형태를 가질 수 있는것
					- 오버라이딩(Overriding)
						- 부모 클래스에 정의되어 있는 메서드를 자식 클래스에서 재정의하여 사용하는것
					- 오버로딩(Overloading)
						- 같은 이름을 가진 메서드를 인자값의 종류나 개수를 다르게 하여 다른 기능을 구현하도록 정의하는것
			- 5원칙(SOLID 원칙)
				1. 단일 책임 원칙(Single Responsibility Principle)
					- 모든 클래스는 각각 하나의 책임만 가져야 한다. 
					즉, 특수한 목적을 수행하도록 만든 클래스는 해당 목적 외에 다른 기능을 수행하면 안된다.
				2. 개방-폐쇄 원칙(Open Closed Principle)
					- 클래스는 확장에는 열려있고 수정에는 닫혀있어야 한다. 
					즉, 기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계되어야 한다.
					- 추상화, 다형성이 이를 가능하게 해주고, 재사용 코드를 만드는 기반이 됨
				3. 리스코프 치환 원칙(Liskov Substitution Principle)
					- 자식 클래스는 언제나 자신의 부모 클래스를 대체할 수 있어야 한다.
					즉, 자식 클래스는 부모 클래스의 책임을 무시하거나 재정의하지 않고 확장만 수행하도록 해야한다.
					- 쉽게 이야기해서 부모와 자식간 기능의 일관성이 있어야 한다는 의미
					- 이를 위해서 상위(부모) 클래스는 공통 속정이나 추상화된 기능만을 가지고 있어야 함
				4. 인터페이스 분리 원칙(Interface Segregation Principle)
					- 한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야 한다.
					- 하나의 일반적인 인터페이스보다 여러 개의 구체적인 인터페이스가 낫다.
				5. 의존 관계 역전 원칙(Dependency Inversion Principle)
					- 의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운것, 거의 변화가 없는 것에 의존해야 한다.
					즉, 구체적인 클래스 보다는 인터페이스나 추강 클래스와 관계를 맺어야 한다.
					- 쉽게 이야기 하면 상위 모듈이 하위 모듈의 구현에 의존해서는 안되고 
					하위 모듈은 상위 모듈에서 정의한 추상 타입에 의존해야함
			※ 3요소 5원칙은 강제적인것은 아니지만 지키지 않으면 스스로가 힘들고 동료가 있다면 빳다맞기 매우매우 좋음


